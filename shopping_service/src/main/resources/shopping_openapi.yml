openapi: 3.0.3
info:
  title: microservice for Shopping management - OpenAPI 3.0
  description: |-
    This microservice is designed for shopping management and belongs to the BODGEN microservices group which implements systems for warehouse management.

  version: 1.0.0
x-java-validation-api: jakarta
tags:
  - name: shopping
    description: Operations about shopping
paths:
  /shopping:
    post:
      tags:
        - shopping
      summary: Add new shopping
      description: Add a new shopping to the database
      operationId: addShopping
      requestBody:
        description: structure shopping creation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/ShoppingRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ShoppingRequest'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ShoppingResponse'
        "405":
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - shopping
      summary: Consult the list of shopping
      description: Return the list of Shopping.
      operationId: listShopping
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShoppingResponse'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShoppingResponse'
        "404":
          description: Shopping not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /shopping/{id}:
    put:
      tags:
        - shopping
      summary: Update shopping data
      description: Update Shopping data using id.
      operationId: updateShopping
      parameters:
        - name: id
          in: path
          description: Shopping identifier
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent shopping in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/ShoppingRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ShoppingRequest'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ShoppingResponse'
        "400":
          description: Invalid ID shopping
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Shopping not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "405":
          description: Validation exception
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - shopping
      summary: Search for a shopping by  their identifier.
      description: Returned to the shopping when it exists.
      operationId: getShoppingById
      parameters:
        - name: id
          in: path
          description: Shopping identifier
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ShoppingResponse'
        "400":
          description: Invalid parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Shopping not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - shopping
      summary: Delete a Shopping
      description: Delete a Shopping
      operationId: deleteShopping
      parameters:
        - name: id
          in: path
          description: User identifier
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "400":
          description: Invalid parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    ShoppingRequest:
      type: object
      required:
        - providerDocument
        - detail
        - userId
      properties:
        providerName:
          type: string
          description: Customer names
          example: Josue Elliot
        providerDocument:
          type: string
          description: provider document number
          example: 75265896
        allocateAmount:
          type: number
          format: double
          description: Allocated Amount
          example: 400
        refundAmount:
          type: number
          format: double
          description: Reund Amount
          example: 25.30
        paymentType:
          type: string
          default: EFECTIVO
          example: EFECTIVO
          enum:
            - EFECTIVO
            - TARJETA
            - TRANFERENCIA
          description: Payment Type
        shoppingStatus:
          type: string
          description: Sale Status
          default: PENDING
          example: COMPLETE
          enum:
            - PENDING
            - COMPLETE
            - CANCELED
        priceFinal:
          type: number
          format: double
          description: Price of the shopping
          example: 128.60
        userId:
          type: string
          description: user identifier
          example: 63ab4d5b259e366938611208
        detail:
          type: array
          description: detail of shopping
          items:
            $ref: '#/components/schemas/Detail'
      xml:
        name: ShoppingRequest

    ShoppingResponse:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          maxLength: 50
          example: 63ab4d5b259e366938611208
        providerName:
          type: string
          description: Customer names
          example: Josue Elliot
        providerDocument:
          type: string
          description: provider document number
          example: 75265896
        allocateAmount:
          type: number
          format: double
          description: Allocated Amount
          example: 400
        refundAmount:
          type: number
          format: double
          description: Reund Amount
          example: 25.30
        paymentType:
          type: string
          default: EFECTIVO
          example: EFECTIVO
          enum:
            - EFECTIVO
            - TARJETA
            - TRANFERENCIA
          description: Payment Type
        priceFinal:
          type: number
          format: double
          description: Price of the shopping
          example: 128.60
        shoppingStatus:
          type: string
          description: Sale Status
          default: PENDING
          example: COMPLETE
          enum:
            - PENDING
            - COMPLETE
            - CANCELED
        user:
          $ref: '#/components/schemas/User'
        detail:
          type: array
          items:
            $ref: '#/components/schemas/Detail'
      xml:
        name: ShoppingResponse
    Detail:
      type: object
      properties:
        productName:
          type: string
          description: Name of product
          example: Agua Cielo
        productCode:
          type: string
          description: Code of product
          example: "524AF"
        description:
          type: string
          description: Description of product
          example: Agua de mesa sin gas
        price:
          type: number
          format: double
          description: price for product
          example: 2.60
        quantities:
          type: number
          description: product quantity
          example: 5
        presentation:
          type: string
          description: presentation or version of the product
          example: Unit
        subTotal:
          type: number
          format: double
          description: price for product
          example: 28.60
      xml:
        name: Detail
    User:
      type: object
      properties:
        id:
          type: string
          minLength: 1
          maxLength: 50
          example: 63ab4d5b259e366938611208
        names:
          type: string
          description: Names user
          example: Josue Elliot
        surNames:
          type: string
          description: Surname user
          example: Rivera Flores
        documentType:
          type: string
          description: Document type.
          example: DNI
        documentNumber:
          type: string
          description: Document number
          minLength: 8
          maxLength: 8
          example: "76256325"
      xml:
        name: User
    Error:
      type: object
      properties:
        code:
          description: Error code
          type: string
        status:
          description: http status
          type: integer
          format: int32
        type:
          type: string
          description: Type of error
        message:
          type: string
          description: Message of error
